// Flexbox Containers
//
// The 'flex' value causes an element to generate a block-level flex
// container box.
//
// The 'inline-flex' value causes an element to generate a inline-level
// flex container box.
//
// display: flex | inline-flex
//
// http://w3.org/tr/css3-flexbox/#flex-containers
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flexbox {
  display: -webkit-box;
  display: -ms-flexbox;
  display: -moz-flex;
  display: -webkit-flex;
  display: flex;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: -moz-inline-flex;
  display: -webkit-inline-flex;
  display: inline-flex;
}

// Flexbox Direction
//
// The 'flex-direction' property specifies how flex items are placed in
// the flex container, by setting the direction of the flex container's
// main axis. This determines the direction that flex items are laid out in.
//
// Values: row | row-reverse | column | column-reverse
//
// http://w3.org/tr/css3-flexbox/#flex-direction-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flex-direction($value) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }

  -ms-flex-direction: $value;
  -moz-flex-direction: $value;
  -webkit-flex-direction: $value;
  flex-direction: $value;
}

// Flexbox Wrap
//
// The 'flex-wrap' property controls whether the flex container is single-line
// or multi-line, and the direction of the cross-axis, which determines
// the direction new lines are stacked in.
//
// Values: nowrap | wrap | wrap-reverse
//
// http://w3.org/tr/css3-flexbox/#flex-wrap-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flex-wrap($value) {
  // No Webkit Box fallback.
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  -moz-flex-wrap: $value;
  -webkit-flex-wrap: $value;
  flex-wrap: $value;
}

// Flexbox Flow (shorthand)
//
// The 'flex-flow' property is a shorthand for setting the 'flex-direction'
// and 'flex-wrap' properties, which together define the flex container's
// main and cross axes.
//
// Values: <flex-direction> | <flex-wrap>
//
// http://w3.org/tr/css3-flexbox/#flex-flow-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flex-flow($values) {
  // No Webkit Box fallback.
  -ms-flex-flow: $values;
  -moz-flex-flow: $values;
  -webkit-flex-flow: $values;
  flex-flow: $values;
}

// Flexbox Order
//
// The 'order' property controls the order in which flex items appear within
// their flex container, by assigning them to ordinal groups.
//
// http://w3.org/tr/css3-flexbox/#order-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin order($int) {
  -webkit-box-ordinal-group: $int + 1;
  -ms-flex-order: $int;
  -moz-order: $int;
  -webkit-order: $int;
  order: $int;
}

// Flexbox Grow
//
// The 'flex-grow' property sets the flex grow factor. Negative numbers
// are invalid.
//
// http://w3.org/tr/css3-flexbox/#flex-grow-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flex-grow($int) {
  -webkit-box-flex: $int;
  -moz-box-flex: $int;
  -ms-flex-positive: $int;
  -moz-flex-grow: $int;
  -webkit-flex-grow: $int;
  flex-grow: $int;
}

// Flexbox Shrink
//
// The 'flex-shrink' property sets the flex shrink factor. Negative numbers
// are invalid.
//
// http://w3.org/tr/css3-flexbox/#flex-shrink-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flex-shrink($int) {
  -ms-flex-negative: $int;
  -moz-flex-shrink: $int;
  -webkit-flex-shrink: $int;
  flex-shrink: $int;
}

// Flexbox Basis
//
// The 'flex-basis' property sets the flex basis. Negative lengths are invalid.
//
// Values: Like "width"
//
// http://www.w3.org/TR/css3-flexbox/#flex-basis-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flex-basis($value) {
  -ms-flex-preferred-size: $value;
  -moz-flex-basis: $value;
  -webkit-flex-basis: $value;
  flex-basis: $value;
}

// Flexbox "Flex" (shorthand)
//
// The 'flex' property specifies the components of a flexible length: the
// flex grow factor and flex shrink factor, and the flex basis. When an
// element is a flex item, 'flex' is consulted instead of the main size
// property to determine the main size of the element. If an element is
// not a flex item, 'flex' has no effect.
//
// Values: none | <flex-grow> <flex-shrink> || <flex-basis>
// Default: See individual properties (0 1 auto).
//
// http://w3.org/tr/css3-flexbox/#flex-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin flex($fg: 0, $fs: 1, $fb: auto) {
  // Box-Flex only supports a flex-grow value so let's grab the
  // first item and just return that.
  $fg-boxflex: $fg;

  @if $fg == none {
    -webkit-box-flex: 0;
    -moz-box-flex: 0;
    -ms-flex: none;
    -moz-flex: none;
    -webkit-flex: none;
    flex: none;
  } @else {
    -webkit-box-flex: $fg-boxflex;
    -moz-box-flex: $fg-boxflex;
    -ms-flex: $fg $fs $fb;
    -moz-flex: $fg $fs $fb;
    -webkit-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
  }
}

// Flexbox Justify Content
//
// The 'justify-content' property aligns flex items along the main axis
// of the current line of the flex container. This is done after any flexible
// lengths and any auto margins have been resolved. Typically it helps distribute
// extra free space leftover when either all the flex items on a line are
// inflexible, or are flexible but have reached their maximum size. It also
// exerts some control over the alignment of items when they overflow the line.
//
// Note: 'space-*' values not supported in older syntaxes.
//
// Values: flex-start | flex-end | center | space-between | space-around
//
// http://w3.org/tr/css3-flexbox/#justify-content-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin justify-content($value) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -moz-justify-content: $value;
  -webkit-justify-content: $value;
  justify-content: $value;
}

// Flexbox Align Items
//
// Flex items can be aligned in the cross axis of the current line of the
// flex container, similar to 'justify-content' but in the perpendicular
// direction. 'align-items' sets the default alignment for all of the flex
// container's items, including anonymous flex items. 'align-self' allows
// this default alignment to be overridden for individual flex items. (For
// anonymous flex items, 'align-self' always matches the value of 'align-items'
// on their associated flex container.)
//
// Values: flex-start | flex-end | center | baseline | stretch
//
// http://w3.org/tr/css3-flexbox/#align-items-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin align-items($value) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -moz-align-items: $value;
  -webkit-align-items: $value;
  align-items: $value;
}

// Flexbox Align Self
//
// Values: auto | flex-start | flex-end | center | baseline | stretch
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin align-self($value) {
  // No Webkit Box Fallback.
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  -moz-align-self: $value;
  -webkit-align-self: $value;
  align-self: $value;
}

// Flexbox Align Content
//
// The 'align-content' property aligns a flex container's lines within the
// flex container when there is extra space in the cross-axis, similar to
// how 'justify-content' aligns individual items within the main-axis. Note,
// this property has no effect when the flexbox has only a single line.
//
// Values: flex-start | flex-end | center | space-between | space-around | stretch
//
// http://w3.org/tr/css3-flexbox/#align-content-property
// http://css-tricks.com/snippets/css/a-guide-to-flexbox/
@mixin align-content($value) {
  // No Webkit Box Fallback.
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  -moz-align-content: $value;
  -webkit-align-content: $value;
  align-content: $value;
}